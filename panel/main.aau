import win.ui;
import win.ui.menu;
import process;
import win.util.tray;
import com.picture;
import web.layout;
import web.json;
import process;
import process.popen;

var WIN_WIDTH  = 500;
var WIN_HEIGHT = 300;
var winform  = ..win.form( right=WIN_WIDTH;bottom=WIN_HEIGHT;parent=...;max=false;border="thin";text="禅道管理系统控制面板";topmost=1;mode="popup" )
deskRect   = winform.getRect();
clientRect = winform.getClientRect();
deskWidth  = deskRect.left + deskRect.right;
deskHeight = deskRect.top  + deskRect.bottom;
winform.setPos(deskWidth - WIN_WIDTH - 8, deskHeight - WIN_HEIGHT - 35);

tray         = win.util.tray(winform);
tray.message = 0x400+9981/*_WM_TRAYMESSAGE*/
tray.tip     = "禅道管理系统控制面板1.0";
winform.popmenu = win.ui.popmenu(winform);
winform.popmenu.add('&退出', function(id){ exit() });

winform.wndproc = function(hwnd,message,wParam,lParam)
{
	select(message) 
	{
		case( 0x400+9981/*_WM_TRAYMESSAGE*/ ) 
		{ 
			if(lParam = 0x203/*_WM_LBUTTONDBLCLK*/)
			{
				winform.show(); 
			}
		
	    	if( lParam = 0x205/*_WM_RBUTTONUP*/ )
	    	{
	    		import mouse;
	    		x,y = mouse.getPos();	    		
	    		win.setForeground(winform.hwnd)
	    		winform.popmenu.popup( x,y,true )
	    	}
		} 
		case( 0x112/*_WM_SYSCOMMAND*/ ) 
		{ 		
			if( wParam == 0xF020/*_SC_MINIMIZE*/ )
			{		
				winform.show(false); 
				tray.pop("最小化到托盘了。。。", "提示！");
  			}
  			if( wParam == 0xF060/*_SC_CLOSE*/) 
  			{
  				exit();
  			}
		}
	}	
}

var wbLayout = web.layout(winform);
wbLayout.go("/layout/index.html");
wbLayout.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams)
{
	if(ltEle.name == 'start')    start();
	if(ltEle.name == 'access')   access();
	if(ltEle.name == 'stop')     stop();
	if(ltEle.name == 'snapshot') snapshot();
	if(ltEle.name == 'exit')     exit();
}

var TMP_FILE    = ".\tmp\tmp";
var OK_FILE     = ".\tmp\ok";
var CONFIG_FILE = ".\tmp\config";

var isInstall  = false;
var vboxManageExe = "";

var getVboxManage  = ".\bin\getVboxManage.bat";
var testVboxManage = ".\bin\testVboxManage.bat";

var isExist    = false;
var isExistBat = ".\bin\isExist.bat";

var isRunning    = false;
var isRunningBat = ".\bin\isRunning.bat";

var startBat     = ".\bin\start.bat";
var installBat   = ".\bin\install.bat";
var uninstallBat = ".\bin\uninstall.bat";
var accessBat    = ".\bin\access.bat";
var stopBat      = ".\bin\stop.bat";
var snapshotBat  = ".\bin\snapshot.bat";

function print(content)
{
	wbLayout.getEle("output").value += '\n' + tostring(content);
}
  
 function exit()
 {
 	tray.delete();
 	winform.close();
 	win.quitMessage();
 }
 
 function exec(command, config)
 {
 	var batFile = '';
 	var execCmd = '';
 	var result = false;
 	
 	select(command)
 	{
 	    case 'getVboxManage' { batFile = getVboxManage;}
 	    case 'testVboxManage'{ batFile = testVboxManage;}
 		case 'isExist'  	 { batFile = isExistBat;}
 		case 'isRunning'	 { batFile = isRunningBat;}
 		case 'install'		 { batFile = installBat;}
 		case 'uninstall'	 { batFile = uninstallBat;}
 		case 'start'      	 { batFile = startBat;}	
 		case 'access'  		 { batFile = accessBat;}
 		case 'stop'    		 { batFile = stopBat;}
 		case 'snapshot'    	 { batFile = snapshotBat;}
 		else                 { return(execute(command) == 0);}
 	}
 	
	if(!io.open(batFile, 'r')) 
	{ 
	    win.msgbox("找不到文件" + batFile, "错误提示");
		exit();
	}

	for line in io.lines(batFile) 
	{
		if(string.find(line, "\%VBoxManage\%"))
		{
			execCmd = string.replace(line, "\%VBoxManage\%", vboxManageExe);
			if(command == 'snapshot')
			{	
				snapshotName = time(time(),"%Y%m%d");
			
				execCmd = string.replace(execCmd, "\%snapshotName\%", '"' + tostring(snapshotName) + '"');					
			}
			
			if(command == 'install')
			{
				execCmd = string.replace(execCmd, "\%memory\%",   tostring(config.memory));
				execCmd = string.replace(execCmd, "\%cpus\%",     tostring(config.cpus));
				execCmd = string.replace(execCmd, "\%httpPort\%", tostring(config.httpPort));
				execCmd = string.replace(execCmd, "\%sshPort\%",  tostring(config.sshPort));
			}
		}
		else 
		{
			execCmd = line;	
		}
		result = (execute(execCmd) == 0);	
	}
	
	return result;
 }
 
 function setButtonStatus()
 {
 	var startButton    = wbLayout.getEle("start");
 	var accessButton   = wbLayout.getEle("access");
 	var stopButton     = wbLayout.getEle("stop");
 	var snapshotButton = wbLayout.getEle("snapshot");

 	if(isRunning)
 	{
		startButton.setAttribute("disabled", "disabled");
		accessButton.setAttribute("disabled", null);
		stopButton.setAttribute("disabled", null);	
	}
	else
	{
		startButton.setAttribute("disabled", null);
		accessButton.setAttribute("disabled", "disabled");
		stopButton.setAttribute("disabled", "disabled");	
	}		
 }
 
 function setVboxManage()
 {
 	isInstall = exec('getVboxManage');
 	if(isInstall)
 	{
 		vboxManageExe = string.load(TMP_FILE);
 		vboxManageExe = string.sub(vboxManageExe, string.find(vboxManageExe,"\\") - 2);
 		vboxManageExe = string.replace(vboxManageExe, '\n', '');
 		vboxManageExe = string.replace(vboxManageExe, "\\", "\\\\");
 		vboxManageExe += '\VBoxManage.exe';
 		if(!exec('testVboxManage')) print('请设置VBoxMange.exe路径……')
 	}
 	else
 	{
 		win.msgbox（'你尚未安装virtualBox，请先安装……', "提示"）;
 		exec('start https://www.virtualbox.org/wiki/Downloads');
 		exit();
 	}	
 }
 
 function init()
 {
 	setVboxManage();
 	isExist = exec('isExist');
 	if(isExist) 
	{
		isRunning = exec('isRunning');
		
		if(isRunning) 
		{
			print('禅道管理系统正在运行中……');
			print('请点击“访问”按钮访问禅道。');
		}
		else 
		{
			print('禅道管理系统未启动……');
		}
	}
	else 
	{
		print('禅道管理系统未安装……');
		print('请点击”启动“按钮进行安装。');
	}
	setButtonStatus();	
 }
 init();
 
 configform = ..win.form( right=400;bottom=250;parent=...;max=false;border="thin";text="参数配置";topmost=1;mode="popup" )
 config = {};
 function getAvailablePort(connectType)
 {
 	var defaultPort = connectType == 'http' and 80 or 22;
 	var netstat = process.popen("netstat","-an");
	var strRet  = netstat.read(-1);
	for ip,port in string.gmatch( strRet,"<TCP>|<UDP>\s+([\d\.]+)\:(\d+)")
	{ 
		if(port == defaultPort)	defaultPort++;
	}
	
	return tostring(defaultPort);
 }
 
 function configAndInstall()
 {
	configLayout = web.layout(configform);
	configLayout.go("/layout/config.html");	
	configLayout.getEle('httpPort').value = getAvailablePort('http');
	configLayout.getEle('sshPort').value = getAvailablePort('ssh');
	
	
	configLayout.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams)
	{
		if(ltEle.name == 'save') saveConfig();
	}
	configform.show();
	
	
	function saveConfig()
	{	
		config.memory   = tonumber(configLayout.getEle('memory').value);  
		config.cpus     = tonumber(configLayout.getEle('cpus').value);
		config.httpPort = tonumber(configLayout.getEle('httpPort').value);
		config.sshPort  = tonumber(configLayout.getEle('sshPort').value);
		if(config.memory == null or config.memory < 128) 
		{
			configform.msgbox("内存值设置不合法！（memory>=128M）", "提示！");
			return false;
		}
		if(config.cpus == null or config.cpus < 1 or config.cpus > 4) 
		{
			configform.msgbox("CPU个数设置不合法！（1<=cpus<=4）", "提示！");
			return false;
		}
		if(config.httpPort == null or config.httpPort < 1 or config.httpPort > 65535)
		{
			configform.msgbox("主机http端口设置不合法！（1<=port<=65535）", "提示！");
			return false;
		}
		if(config.sshPort == null or config.sshPort < 1 or config.sshPort > 65535) 
		{
			configform.msgbox("主机ssh端口设置不合法！（1<=port<=65535）", "提示！");
			return false;
		}
		string.save(CONFIG_FILE, web.json.stringify(config,true));
		configform.show(false);
		print('现在开始安装禅道管理系统……');
		isExist = exec('install', config);
		if(!isExist) return print('禅道管理系统安装失败……');
		print('现在开始启动禅道管理系统……');
		isRunning = exec('start');
		setButtonStatus();
		if(isRunning) return print('禅道管理系统正在运行……\n请点击“访问”按钮访问禅道。');
		print("禅道管理系统启动失败……");
	}
 }
 
 function start()
 {	
 	isExist = exec('isExist');
	if(isExist) 
	{
		print('正在启动禅道管理系统……');
		isRunning = exec('start');
		setButtonStatus();
		if(isRunning) return print('禅道管理系统正在运行……\n请点击”访问“按钮访问禅道。');
		print('禅道管理系统启动失败……');
	}
	else 
	{
		configAndInstall();	
	}	
 }
 
 function access()
 {	
 	var configJson = string.load(CONFIG_FILE);
 	var config = web.json.parse(configJson);
 	if(config == null) return win.msgbox("找不着文件：" + CONFIG_FILE, "提示！");
 	exec('start http://localhost:' + config.httpPort);
 }
 
 function stop()
 {	
 	print('正在停止禅道管理系统……');
 	isRunning = !exec('stop');
 	setButtonStatus();
 	if(isRunning) return print('停止禅道管理系统失败。');
 	print('禅道管理系统已经停止。')
 }
 
 function snapshot()
 {
 	print('正在备份禅道管理系统……');
 	if(exec('snapshot')) return print('备份成功！备份为"' + tostring(snapshotName) + '"');
 	print('备份失败');
 }
 
winform.show();
win.loopMessage();